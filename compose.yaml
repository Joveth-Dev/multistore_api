services:
  backend:
    build:
      context: .
    ports:
      - 8000:8000
    env_file:
      - .env
    volumes:
      - static:/usr/src/app/static
    develop:
      watch:
        - action: rebuild
          path: .env
        - action: rebuild
          path: docker-entrypoint.sh
        - action: rebuild
          path: requirements.txt
        - action: rebuild
          path: multistore_api/settings.py
        - action: sync+exec
          path: .
          target: /usr/src/app
          exec:
            command: python manage.py migrate
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres
    user: postgres
    volumes:
      - multistore_api_data:/var/lib/postgresql/data
      - multistore_api_data_backup:/backups
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    expose:
      - ${POSTGRES_PORT}
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  static:
  multistore_api_data:
  multistore_api_data_backup:
